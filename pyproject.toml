[tool.poetry]
name = "project-name"
version = "0.0.0"
description = "My Project Description"
authors = ["My Name <name@company.com>"]
maintainers = ["My Name <name@company.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/langestefan/python-package-template"
repository = "https://github.com/langestefan/python-package-template"
documentation = "https://github.com/langestefan/python-package-template"
keywords = ["project", "template", "python", "package"]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
packages = [
  { include = "mypackage"}
]

[tool.poetry.dependencies]
python = "^3.12"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/langestefan/python-package-template/issues"
Changelog = "https://github.com/langestefan/python-package-template/releases"

[tool.poetry.group.dev.dependencies]
blacken-docs = "1.16.0"
codespell = "2.2.6"
covdefaults = "2.3.0"
coverage = {version = "7.4.0", extras = ["toml"]}
mypy = "1.8.0"
pre-commit = "3.6.0"
pre-commit-hooks = "4.5.0"
pylint = "3.0.3"
pytest = "7.4.4"
pytest-asyncio = "0.23.3"
pytest-cov = "4.1.0"
ruff = "0.1.13"
yamllint = "1.33.0"

[tool.coverage.run]
plugins = ["covdefaults"]
source = ["mypackage"]

[tool.coverage.report]
fail_under = 90
show_missing = true

[tool.mypy]
# Specify the target platform details in config, so your developers are
# free to run mypy on Windows, Linux, or macOS and get consistent
# results.
platform = "linux"
python_version = "3.12"

# flake8-mypy expects the two following for sensible formatting
show_column_numbers = true

# show error messages from unrelated files
follow_imports = "normal"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# be strict
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_optional = true
warn_incomplete_stub = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pylint.BASIC]
good-names = [
  "_",
  "ex",
  "fp",
  "i",
  "id",
  "j",
  "k",
  "on",
  "Run",
  "T",
  "wv",
]

[tool.pylint."MESSAGES CONTROL"]
disable= [
  "duplicate-code",
  "format",
  "unsubscriptable-object",
]

[tool.pylint.SIMILARITIES]
ignore-imports = true

[tool.pylint.FORMAT]
max-line-length = 88

[tool.pylint.DESIGN]
max-attributes = 20

[tool.pylint.MASTER]
ignore-paths = [
  "tests",
]

[tool.pytest.ini_options]
addopts = "--cov-report xml:coverage.xml --cov mypackage --cov-fail-under 0 --cov-append -m 'not integration' --cov-report term-missing"
log_cli = true
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
testpaths = "tests"
junit_family = "xunit2"
markers = [
    "integration: marks as integration test",
    "notebooks: marks as notebook test",
    "gpu: marks as gpu test",
    "slow: marks tests as slow",
    "unit: fast offline tests",
]

[tool.ruff]
select = ["ALL"]
ignore = [
  "ANN101", # Self... explanatory
  "ANN401", # Opinioated warning on disallowing dynamically typed expressions
  "D203", # Conflicts with other rules
  "D213", # Conflicts with other rules
  "D417", # False positives in some occasions
  "PLR2004", # Just annoying, not really useful

  # Formatter conflicts
  "COM812",
  "COM819",
  "D206",
  "E501",
  "ISC001",
  "Q000",
  "Q001",
  "Q002",
  "Q003",
  "W191",
]

[tool.ruff.flake8-pytest-style]
mark-parentheses = false
fixture-parentheses = false

[tool.ruff.isort]
known-first-party = ["mypackage"]

[tool.ruff.mccabe]
max-complexity = 25

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0"]
